openapi: 3.0.0
info:
  version: "1"
  title: Webstore API
  description: Backend for the Webstore application
  contact:
    name: Fredrik B

servers:
  - url: /api

security:
  - bearerAuth: []

paths:
  /cart:
    post:
      summary: Creates a new shopping cart
      operationId: createCart
      tags:
        - order
      requestBody:
        description: The new shopping cart to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
      responses:
        '201':
          description: Shopping cart was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      summary: Updates the shopping cart
      operationId: UpdateCart
      tags:
        - order
      requestBody:
        description: The updated shopping cart.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
      responses:
        '200':
          description: Shopping cart was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /order:
    get:
      summary: Fetches a list of all orders
      tags:
        - order
      operationId: getOrders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      summary: Creates a new order OR shopping basket
      operationId: createOrder
      tags:
        - order
      requestBody:
        description: The new order or shopping basket to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDto'
      responses:
        '201':
          description: Order or shopping basket was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'
  /order/{customerId}:
    get:
      summary: Fetches a list of orders for logged in customer
      tags:
        - order
      operationId: getCustomerOrders
      parameters:
        - in: path
          name: customerId
          schema:
            type: integer
          required: true
          description: Id for customer
      responses:
        '200':
          description: A list of customer orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/DefaultError'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    OrderDto:
      type: object
      required:
        - customerId
        - orderLines
      properties:
        id:
          type: integer
          description: Order ID
        customerId:
          type: integer
          description: ID of customer
        totalPrice:
          type: string
        lastModified:
          type: string
          format: date-time
          readOnly: true
        finalizedOrderDateTIme:
          type: string
          format: date-time
          readOnly: true
        orderStatus:
          $ref: '#/components/schemas/OrderStatus'
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
        orderLines:
          type: array
          items:
            $ref: '#/components/schemas/OrderLineDto'

    OrderLineDto:
      type: object
      required:
        - itemId
        - quantity
        - unitPrice
      properties:
        id:
          type: integer
        itemId:
          type: integer
        quantity:
          type: integer
        unitPrice:
          type: string


    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string


    OrderStatus:
      type: string
      enum:
        - SHOPPING_CART
        - PROCESSING
        - IN_PROGRESS
        - SHIPPED
        - DELIVERED
        - RETURNED
      description: >
        Type status:
          * `SHOPPING_CARD` - Status for at objektet er opprettet og klart for godkjenning
          * `PROCESSING` - Status for at objektet er avvist
          * `IN_PROGRESS` - Status for at objektet redigeres
          * `SHIPPED` - Status for at objektet er godkjent
          * `DELIVERED` - Status for at objektet er bestilt
          * `RETURN` - Status for at objektet er bestilt
      readOnly: true

    PaymentStatus:
      type: string
      enum:
        - PAID
        - UNPAID
        - PAID_INVOICE
        - UNPAID_INVOICE
        - UNPAID_ERROR
      description: >
        Type status:
          * `PAID` - Status for at objektet er opprettet og klart for godkjenning
          * `UNPAID` - Status for at objektet er avvist
          * `PAID_INVOICE` - Status for at objektet redigeres
          * `UNPAID_INVOICE` - Status for at objektet er godkjent
          * `UNPAID_ERROR` - Status for at objektet er bestilt
      readOnly: true

  responses:
    BadRequest:
      description: An error occurred during request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: You lack the requited permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: You can't access the specific resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Can't find specified resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: An error occurred on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DefaultError:
      description: An error occured
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'